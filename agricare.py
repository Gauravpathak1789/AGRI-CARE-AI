import streamlit as st
from PIL import Image
import numpy as np
import xgboost 
import joblib
from ultralytics import YOLO
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.messages import HumanMessage
import torch
import warnings

# Suppress the specific XGBoost warning
warnings.filterwarnings("ignore", message=".*XGBoost.*")

torch.classes.__path__ = []
# ------------------ CONFIG & STYLE ------------------
st.set_page_config(page_title="ЁЯМ╛ AgriCare AI", layout="centered", initial_sidebar_state="collapsed")

st.markdown("""
    <style>
    body {
        background-color: #0e1117;
        color: #ffffff;
        font-family: 'Segoe UI', sans-serif;
    }
    .stButton>button {
        background-color: #28a745;
        color: white;
        font-size: 16px;
        padding: 8px 24px;
        border-radius: 8px;
    }
    .stButton>button:hover {
        background-color: #218838;
    }
    .stTextInput>div>div>input, .stNumberInput>div>div>input {
        background-color: #1e222a;
        color: white;
    }
    </style>
""", unsafe_allow_html=True)

st.title("ЁЯМ┐ AgriCare AI: Disease Detection, Soil & Smart Review Analyzer")

# ------------------ LOAD MODELS ------------------
bost = xgboost.Booster()
try:
    disease_model = YOLO("best.pt")
    soil_model = joblib.load("soli_analysis.pkl")
except Exception as e:
    st.error(f"ЁЯФ┤ Error loading models: {e}")

valid_classes = ["Tomato Early blight leaf", "Potato leaf early blight", "Tomato leaf", "Tomato mold leaf"]

# ------------------ FUNCTIONS ------------------


#xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
def detect_disease(image):
    image.save("temp.jpg")
    results = disease_model.predict("temp.jpg", save=True, stream=False, imgsz=640)
    annotated = results[0].plot()
    pred_image = Image.fromarray(annotated)
    label = results[0].names[int(results[0].boxes.cls[0])] if results[0].boxes else "Unknown"
    return label, pred_image

# def predict_soil_fertility_np(features_list):
#     arr = np.array(features_list, dtype=object).reshape(1, 12)
#     prediction = soil_model.predict(arr)[0]
#     soil_labels = ["Low Fertility", "Moderate Fertility", "High Fertility"]
#     recommendations = [
#         "Add organic manure and compost.",
#         "Apply balanced NPK fertilizers.",
#         "Great soil! Maintain it with cover crops."
#     ]
#     return soil_labels[prediction], recommendations[prediction]

def analyze_review_with_gemini_hindi(review_text):
    GOOGLE_API_KEY = "AIzaSyCaP65ZQSalRwjqUDFaJzo89JmYUcAyjmw"
    model = ChatGoogleGenerativeAI(model="gemini-1.5-pro", google_api_key=GOOGLE_API_KEY)
    prompt = f"""рдХреГрдкрдпрд╛ рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рдЧреНрд░рд╛рд╣рдХ рд╕рдореАрдХреНрд╖рд╛ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ рдФрд░ рдЗрд╕реЗ рд╕рд░рд▓ рд╣рд┐рдВрджреА рдореЗрдВ рд╕рдВрд░рдЪрд┐рдд рддрд░реАрдХреЗ рд╕реЗ рдкреНрд░рд╕реНрддреБрдд рдХрд░реЗрдВред рдореБрдЦреНрдп рднрд╛рд╡рдирд╛рдУрдВ, рд╕рдХрд╛рд░рд╛рддреНрдордХ рдФрд░ рдирдХрд╛рд░рд╛рддреНрдордХ рдкрд╣рд▓реБрдУрдВ, рдФрд░ рд╕реБрдзрд╛рд░ рдХреЗ рд╕реБрдЭрд╛рд╡реЛрдВ рдкрд░ рдзреНрдпрд╛рди рдХреЗрдВрджреНрд░рд┐рдд рдХрд░реЗрдВред

    рд╕рдореАрдХреНрд╖рд╛:
    {review_text}
    """
    result = model.invoke([HumanMessage(content=prompt)])
    return result.content

def generate_hindi_gpt_advice(plant_name, disease_label):
    from langchain_google_genai import ChatGoogleGenerativeAI
    from langchain_core.messages import HumanMessage

    GOOGLE_API_KEY = "AIzaSyCaP65ZQSalRwjqUDFaJzo89JmYUcAyjmw"
    model = ChatGoogleGenerativeAI(model="gemini-1.5-pro", google_api_key=GOOGLE_API_KEY)

    prompt = (
        f"рдореИрдВ рдПрдХ рдХрд┐рд╕рд╛рди рд╣реВрдБред рдореЗрд░реЗ '{plant_name}' рдкреМрдзреЗ рдХреЛ '{disease_label}' рдирд╛рдо рдХреА рдмреАрдорд╛рд░реА рд╣реЛ рдЧрдИ рд╣реИред "
        f"рдХреГрдкрдпрд╛ рдореБрдЭреЗ рдХреГрд╖рд┐ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдХреА рддрд░рд╣ рд╕рд▓рд╛рд╣ рджреЗрдВ:\n"
        f"1. рдЗрд╕ рдмреАрдорд╛рд░реА рдХреЗ рд▓рдХреНрд╖рдг рдХреНрдпрд╛ рд╣реИрдВ?\n"
        f"2. рдпрд╣ рдмреАрдорд╛рд░реА рдХреИрд╕реЗ рдФрд░ рдХреНрдпреЛрдВ рд╣реЛрддреА рд╣реИ?\n"
        f"3. рдЗрд╕рдХреЗ рдЗрд▓рд╛рдЬ рдХреЗ рд▓рд┐рдП рдХреМрди рд╕реЗ рдЬреИрд╡рд┐рдХ (рдСрд░реНрдЧреЗрдирд┐рдХ) рдЙрдкрд╛рдп рдпрд╛ рджрд╡рд╛рдЗрдпрд╛рдБ рдЙрдкрдпреЛрдЧ рдХреА рдЬрд╛ рд╕рдХрддреА рд╣реИрдВ?\n"
        f"4. рдШрд░ рдкрд░ рдЙрдкрдпреЛрдЧ рдХрд┐рдП рдЬрд╛ рд╕рдХрдиреЗ рд╡рд╛рд▓реЗ рдШрд░реЗрд▓реВ рдиреБрд╕реНрдЦреЗ рдпрд╛ рдЙрдкрд╛рдп рднреА рдмрддрд╛рдПрдВред\n"
        f"5. рдЗрд╕ рдмреАрдорд╛рд░реА рд╕реЗ рдмрдЪрд╛рд╡ рдХреЗ рдЙрдкрд╛рдп рднреА рдмрддрд╛рдПрдВред\n"
        f"рдХреГрдкрдпрд╛ рдЬрд╡рд╛рдм рд╕рд░рд▓ рд╣рд┐рдВрджреА рдореЗрдВ рджреЗрдВ, рддрд╛рдХрд┐ рдХрд┐рд╕рд╛рди рдЖрд╕рд╛рдиреА рд╕реЗ рд╕рдордЭ рд╕рдХреЗред"
    )

    response = model.invoke([HumanMessage(content=prompt)])
    return response.content.strip()


# ------------------ TABS ------------------
tab1, tab2, tab3= st.tabs(["ЁЯМ┐ Plant Disease Detection", "ЁЯзк Soil Analysis", "ЁЯза Smart Review Analysis"])

# ----------- TAB 1: PLANT DISEASE DETECTION ------------
with tab1:
    st.subheader("ЁЯОЛЁЯШД:-'рдкрддреНрддрд┐рдпреЛрдВ рдореЗрдВ рдЫреБрдкрд╛ рд░рд╛рдЬрд╝, рд╣рдо рдмрддрд╛рдПрдВрдЧреЗ рдЖрдЬ!'")
    
    uploaded_img = st.file_uploader("ЁЯУд Upload  Plant Image", type=["jpg", "jpeg", "png"])

    if uploaded_img is not None:
        img = Image.open(uploaded_img)
        st.image(img, caption="ЁЯУ╖ Uploaded Image", use_container_width=True)

        label, pred_img = detect_disease(img)

        st.image(pred_img, caption=f"Detected: {label}", use_container_width=True)
        st.caption(f"ЁЯУ╖ Image shows: {label}")

        plant_name = st.text_input("Enter the plant name (e.g., Potato, tomato, etc.):")

        # If the user has provided a plant name
        if plant_name:
            st.write("ЁЯза GPT Output (Hindi):")
            try:
                response_text = generate_hindi_gpt_advice(plant_name, label)  # Pass both plant_name and disease label
                st.success(response_text)
            except Exception as e:
                st.error("тЭМ Error generating GPT response.")
                st.exception(e)
        else:
            st.info("Please enter the plant name to get advice.")

    else:
        st.info("ЁЯСЖ Upload an image above to detect disease and get recommendations.")





# ----------- TAB 2: SOIL ANALYSIS -------------
def predict_soil_fertility_np(features_list):
    arr = np.array(features_list, dtype=object).reshape(1, 12)
    prediction = soil_model.predict(arr)[0]
    soil_labels = ["Low Fertility", "Moderate Fertility", "High Fertility"]
    return soil_labels[prediction]

def get_soil_recommendations_with_gemini(inputs, fertility_result):
    GOOGLE_API_KEY = "AIzaSyCaP65ZQSalRwjqUDFaJzo89JmYUcAyjmw"
    model = ChatGoogleGenerativeAI(model="gemini-1.5-pro", google_api_key=GOOGLE_API_KEY)
    input_str = ", ".join(f"{key}: {value}" for key, value in inputs.items())
    prompt = f"""рдЖрдк рдПрдХ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣рдХрд╛рд░ рд╣реИрдВред рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рдорд┐рдЯреНрдЯреА рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдЗрдирдкреБрдЯ рдФрд░ рдЕрдиреБрдорд╛рдирд┐рдд рдЙрд░реНрд╡рд░рддрд╛ рд╕реНрддрд░ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░рддреЗ рд╣реБрдП, рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рд╡рд┐рд╕реНрддреГрдд рдФрд░ рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдкреНрд░рджрд╛рди рдХрд░реЗрдВред рдЕрдкрдиреА рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рд╕рд░рд▓ рд╣рд┐рдВрджреА рдореЗрдВ рджреЗрдВред

    рдЗрдирдкреБрдЯ рдкреИрд░рд╛рдореАрдЯрд░: {input_str}
    рдЕрдиреБрдорд╛рдирд┐рдд рдЙрд░реНрд╡рд░рддрд╛ рд╕реНрддрд░: {fertility_result}

    рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ:"""
    result = model.invoke([HumanMessage(content=prompt)])
    return result.content

with tab2:
    st.header("ЁЯМ▒ рдорд┐рдЯреНрдЯреА рд╕реЗ рдбреЗрдЯрд╛ рддрдХ рдХрд╛ рд╕рдлрд░, рдЕрдм рд╣реЛрдЧрд╛ рдЖрд╕рд╛рди рд╣рд░ рдбрдЧрд░! тЮбя╕П рдорд┐рдЯреНрдЯреА тЮбя╕П ЁЯУИ")
    with st.form("soil_form"):
        col1, col2 = st.columns(2)
        with col1:
            N = st.number_input("Nitrogen (N)", 0.0)
            P = st.number_input("Phosphorus (P)", 0.0)
            K = st.number_input("Potassium (K)", 0.0)
            pH = st.number_input("pH Level", 0.0)
            EC = st.number_input("Electrical Conductivity", 0.0)
        with col2:
            OC = st.number_input("Organic Carbon", 0.0)
            S = st.number_input("Sulphur (S)", 0.0)
            Zn = st.number_input("Zinc (Zn)", 0.0)
            Fe = st.number_input("Iron (Fe)", 0.0)
            Cu = st.number_input("Copper (Cu)", 0.0)
        Mn = st.number_input("Manganese (Mn)", 0.0)
        B = st.number_input("Boron (B)", 0.0)
        submitted = st.form_submit_button("рдорд┐рдЯреНрдЯреА рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ")

    if submitted:
        features = [N, P, K, pH, EC, OC, S, Zn, Fe, Cu, Mn, B]
        input_data = {
            "Nitrogen (N)": N,
            "Phosphorus (P)": P,
            "Potassium (K)": K,
            "pH Level": pH,
            "Electrical Conductivity": EC,
            "Organic Carbon": OC,
            "Sulphur (S)": S,
            "Zinc (Zn)": Zn,
            "Iron (Fe)": Fe,
            "Copper (Cu)": Cu,
            "Manganese (Mn)": Mn,
            "Boron (B)": B,
        }
        fertility = predict_soil_fertility_np(features)

        st.subheader("ЁЯУК рдорд┐рдЯреНрдЯреА рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкрд░рд┐рдгрд╛рдо:")
        st.write("рдЖрдкрдиреЗ рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рдЗрдирдкреБрдЯ рдкреНрд░рджрд╛рди рдХрд┐рдП:")
        for key, value in input_data.items():
            st.write(f"- {key}: {value}")
        st.success(f"ЁЯМ╛ рдорд┐рдЯреНрдЯреА рдХреА рдЙрд░реНрд╡рд░рддрд╛: {fertility}")

        try:
            gemini_recommendation = get_soil_recommendations_with_gemini(input_data, fertility)
            st.subheader("ЁЯМ▒ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ:")
            st.write(gemini_recommendation)
        except Exception as e:
            st.error("Gemini AI рд╕реЗ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред")
            st.exception(e)
# ----------- TAB 3: SMART REVIEW ANALYSIS -------------
with tab3:
    st.header("ЁЯза рдлрд╕рд▓ рдХреА рд╣рд░ рдХрд╣рд╛рдиреА, рдЕрдм рдЗрд╕ рдмреЙрдЯ рдХреА рдЬреБрдмрд╛рдиреА! ЁЯМ╛ЁЯЧгя╕ПЁЯдЦ")
    review_input = st.text_area("рдЕрдкрдиреА рдЧреНрд░рд╛рд╣рдХ рд╕рдореАрдХреНрд╖рд╛ рдиреАрдЪреЗ рдкреЗрд╕реНрдЯ рдХрд░реЗрдВ:")
    if st.button("ЁЯза рд╕рдореАрдХреНрд╖рд╛ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ"):
        if review_input:
            try:
                hindi_result = analyze_review_with_gemini_hindi(review_input)
                st.subheader("ЁЯУЭ рд╕рдореАрдХреНрд╖рд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг (рд╣рд┐рдВрджреА рдореЗрдВ):")
                st.write(hindi_result)
            except Exception as e:
                st.error("рд╕рдореАрдХреНрд╖рд╛ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред")
                st.exception(e)
        else:
            st.warning("рдХреГрдкрдпрд╛ рд╕рдореАрдХреНрд╖рд╛ рдЯреЗрдХреНрд╕реНрдЯ рджрд░реНрдЬ рдХрд░реЗрдВред")
